<launch>

  <arg name="/use_sim_time" default="false"/>



  <node name="servo_server" pkg="moveit_servo" type="servo_server" output="screen" ns="my_gen3_right">
    <rosparam command="load" file="$(find toy_assembly)/config/real/servo-config-gen3_right.yaml" />
  </node> 
  <group ns="my_gen3_right">
    <node name="right_arm" pkg="toy_assembly" type="right_robot_arm.py" output="screen" />
  </group>
  <node name="kortex_hack_right" pkg="toy_assembly" type="kortex_hack.py" output="screen" >
    <param name="prefix"  value="right" />
  </node>

  <node name="servo_server" pkg="moveit_servo" type="servo_server" output="screen" ns="my_gen3_left">
    <rosparam command="load" file="$(find toy_assembly)/config/real/servo-config-gen3_left.yaml" />
  </node> 
   <group ns="my_gen3_left">
    <node name="left_arm" pkg="toy_assembly" type="left_robot_arm.py" output="screen" />
  </group>
  <node name="kortex_hack_left" pkg="toy_assembly" type="kortex_hack.py" output="screen" >
    <param name="prefix"  value="left" />  
  </node>

  <node name="transcribe" pkg="toy_assembly" type="audio.py" output="screen" >
    <param name="threshold"  value="0.05" />
    <param name="silent_wait" value="3" />
    <param name="max_duration"  value="15" />
    <param name="debug"  value="True" />
  </node>
  <node name="ada_services" pkg="toy_assembly" type="ada_client.py" output="screen" />
  
<!--
  <node name="audio_recorder" pkg="toy_assembly" type="audio_recorder.py" output="screen" >  </node>
  <node name="robot_speech" pkg="toy_assembly" type="robot_speech.py" output="screen" >  </node>
-->


  
<!--
  <node name="gpt" pkg="toy_assembly" type="gpt_service.py" output="screen" >  </node>

  <node name="object_track" pkg="toy_assembly" type="object_tracking.py" output="screen" >  </node>
  <node name="head_track" pkg="toy_assembly" type="rivr_head_tracking.py" output="screen" >  </node>
  <node name="gaze" pkg="toy_assembly" type="gaze.py" output="screen" >  </node>
  <node name="gaze_target" pkg="toy_assembly" type="gaze_target.py" output="screen" >  </node>
  <node name="bayesgaze" pkg="toy_assembly" type="bayesgaze.py" output="screen" >  </node>

  <node name="slot_detect" pkg="toy_assembly" type="ros_slot_detection.py" output="screen" >  </node>

  <node name="robot_part_tracking" pkg="toy_assembly" type="robot_part_tracking.py" output="screen" >  </node>
  <node name="human_part_tracking" pkg="toy_assembly" type="human_part_tracking.py" output="screen" >  </node>
  <node name="gen_trajectory" pkg="toy_assembly" type="demo_generate_trajectory.py" output="screen" >  </node>
-->


  <include file="$(find toy_assembly)/launch/pcl_segment_real.launch" > 
    <arg name="arm" value="left"/>
  </include>
  <include file="$(find toy_assembly)/launch/pcl_segment_real.launch" > 
    <arg name="arm" value="right"/>
  </include>
  <include file="$(find pointcloud_concatenate)/launch/concat.launch" > 
    <arg name="target_frame" default="left_camera_link" />
    <param name="hz" value=".25" />
    <arg name="cloud_in1" value="/left_camera/depth_registered/points" />
    <arg name="cloud_in2" value="/right_camera/depth_registered/points" />
    <arg name="cloud_out" value="cloud_concatenated" />
  </include>
    
  <arg name="input_cloud" 		default="cloud_concatenated"/>
  <arg name="output_cloud" 		default="output_cloud"/>
  <arg name="debug_output_cloud" 		default="debug_output_cloud"/>

  <arg name="distance_threshold" default="0.04"/>
  <arg name="cluster_tolerance" default="0.03"/>
  <arg name="min_cluster_size" default="30"/>
  <arg name="max_cluster_size" default="500"/>
  <node name= "object_segmentation" pkg= "obj_segmentation" type= "segmentation" output="screen" respawn= "false">
    <param name="distance_threshold"	value="$(arg distance_threshold)"/>
    <param name="cluster_tolerance"	value="$(arg cluster_tolerance)"/>
    <param name="min_cluster_size"	value="$(arg min_cluster_size)"/>
    <param name="max_cluster_size"	value="$(arg max_cluster_size)"/>
    <param name="input_cloud" 		value="$(arg input_cloud)"/>
    <param name="output_cloud" 		value="$(arg output_cloud)"/>
    <param name="debug_output_cloud" 		value="$(arg debug_output_cloud)"/>
  </node>

  <node name="overlay_image" pkg="toy_assembly" type="overlay_image.py" output="screen" >  
    <param name="real"  value="True" />
  </node>


</launch>
